// Generated by Haxe 3.4.7
#ifndef INCLUDED_massive_haxe_util_ReflectUtil
#define INCLUDED_massive_haxe_util_ReflectUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(massive,haxe,util,ReflectUtil)

namespace massive{
namespace haxe{
namespace util{


class HXCPP_CLASS_ATTRIBUTES ReflectUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ReflectUtil_obj OBJ_;
		ReflectUtil_obj();

	public:
		enum { _hx_ClassId = 0x64d4d5bb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="massive.haxe.util.ReflectUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"massive.haxe.util.ReflectUtil"); }

		hx::ObjectPtr< ReflectUtil_obj > __new() {
			hx::ObjectPtr< ReflectUtil_obj > __this = new ReflectUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ReflectUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			ReflectUtil_obj *__this = (ReflectUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ReflectUtil_obj), false, "massive.haxe.util.ReflectUtil"));
			*(void **)__this = ReflectUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ReflectUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ReflectUtil","\xbf","\x02","\x67","\x52"); }

		static  ::Dynamic here( ::Dynamic info);
		static ::Dynamic here_dyn();

};

} // end namespace massive
} // end namespace haxe
} // end namespace util

#endif /* INCLUDED_massive_haxe_util_ReflectUtil */ 
