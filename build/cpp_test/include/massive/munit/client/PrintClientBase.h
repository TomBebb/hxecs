// Generated by Haxe 3.4.7
#ifndef INCLUDED_massive_munit_client_PrintClientBase
#define INCLUDED_massive_munit_client_PrintClientBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_massive_munit_client_AbstractTestResultClient
#include <massive/munit/client/AbstractTestResultClient.h>
#endif
HX_DECLARE_CLASS2(massive,munit,IAdvancedTestResultClient)
HX_DECLARE_CLASS2(massive,munit,ICoverageTestResultClient)
HX_DECLARE_CLASS2(massive,munit,ITestResultClient)
HX_DECLARE_CLASS2(massive,munit,TestResult)
HX_DECLARE_CLASS3(massive,munit,client,AbstractTestResultClient)
HX_DECLARE_CLASS3(massive,munit,client,PrintClientBase)

namespace massive{
namespace munit{
namespace client{


class HXCPP_CLASS_ATTRIBUTES PrintClientBase_obj : public  ::massive::munit::client::AbstractTestResultClient_obj
{
	public:
		typedef  ::massive::munit::client::AbstractTestResultClient_obj super;
		typedef PrintClientBase_obj OBJ_;
		PrintClientBase_obj();

	public:
		enum { _hx_ClassId = 0x54aae2d1 };

		void __construct(hx::Null< bool >  __o_includeIgnoredReport);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="massive.munit.client.PrintClientBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"massive.munit.client.PrintClientBase"); }
		static hx::ObjectPtr< PrintClientBase_obj > __new(hx::Null< bool >  __o_includeIgnoredReport);
		static hx::ObjectPtr< PrintClientBase_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_includeIgnoredReport);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PrintClientBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PrintClientBase","\x69","\x9e","\x73","\xa1"); }

		static void __boot();
		static ::String DEFAULT_ID;
		::String divider1;
		::String divider2;
		bool verbose;
		bool includeIgnoredReport;
		virtual void initializeTestClass();

		virtual void updateTestClass( ::massive::munit::TestResult result);

		virtual void finalizeTestClass();

		virtual void setCurrentTestClassCoverage( ::Dynamic result);

		virtual void reportFinalCoverage( ::Dynamic percent,::Array< ::Dynamic> missingCoverageResults,::String summary,::String classBreakdown,::String packageBreakdown,::String executionFrequency);

		void printIndentedLines(::String value,hx::Null< int >  indent);
		::Dynamic printIndentedLines_dyn();

		void printReports();

		void printFinalIgnoredStatistics(int count);
		::Dynamic printFinalIgnoredStatistics_dyn();

		bool filterIngored( ::massive::munit::TestResult result);
		::Dynamic filterIngored_dyn();

		virtual void printFinalStatistics(bool result,int testCount,int passCount,int failCount,int errorCount,int ignoreCount,Float time);

		virtual void printOverallResult(bool result);

		virtual void print( ::Dynamic value);
		::Dynamic print_dyn();

		void printLine( ::Dynamic value, ::Dynamic indent);
		::Dynamic printLine_dyn();

		::String indentString(::String value, ::Dynamic indent);
		::Dynamic indentString_dyn();

};

} // end namespace massive
} // end namespace munit
} // end namespace client

#endif /* INCLUDED_massive_munit_client_PrintClientBase */ 
