// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_massive_munit_TestSuite
#include <massive/munit/TestSuite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_58_new,"massive.munit.TestSuite","new",0x8e962f11,"massive.munit.TestSuite.new","massive/munit/TestSuite.hx",58,0x3355af41)
HX_LOCAL_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_79_add,"massive.munit.TestSuite","add",0x8e8c50d2,"massive.munit.TestSuite.add","massive/munit/TestSuite.hx",79,0x3355af41)
HX_LOCAL_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_91_hasNext,"massive.munit.TestSuite","hasNext",0x83fcb09e,"massive.munit.TestSuite.hasNext","massive/munit/TestSuite.hx",91,0x3355af41)
HX_LOCAL_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_101_next,"massive.munit.TestSuite","next",0x34d30122,"massive.munit.TestSuite.next","massive/munit/TestSuite.hx",101,0x3355af41)
HX_LOCAL_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_110_repeat,"massive.munit.TestSuite","repeat",0xe487bd4a,"massive.munit.TestSuite.repeat","massive/munit/TestSuite.hx",110,0x3355af41)
HX_LOCAL_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_115_sortTests,"massive.munit.TestSuite","sortTests",0x63bd4d14,"massive.munit.TestSuite.sortTests","massive/munit/TestSuite.hx",115,0x3355af41)
HX_LOCAL_STACK_FRAME(_hx_pos_1066d2e703a4ceb6_119_sortByName,"massive.munit.TestSuite","sortByName",0x1af9eb2f,"massive.munit.TestSuite.sortByName","massive/munit/TestSuite.hx",119,0x3355af41)
namespace massive{
namespace munit{

void TestSuite_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_58_new)
HXLINE(  66)		this->index = (int)0;
HXLINE(  65)		this->tests = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic TestSuite_obj::__CreateEmpty() { return new TestSuite_obj; }

void *TestSuite_obj::_hx_vtable = 0;

Dynamic TestSuite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestSuite_obj > _hx_result = new TestSuite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestSuite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d5c0f79;
}

void TestSuite_obj::add(hx::Class test){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_79_add)
HXLINE(  80)		this->tests->push(test);
HXLINE(  81)		this->sortTests();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestSuite_obj,add,(void))

bool TestSuite_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_91_hasNext)
HXDLIN(  91)		return (this->index < this->tests->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSuite_obj,hasNext,return )

hx::Class TestSuite_obj::next(){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_101_next)
HXDLIN( 101)		if (this->hasNext()) {
HXDLIN( 101)			::Array< ::Dynamic> _hx_tmp = this->tests;
HXDLIN( 101)			return _hx_tmp->__get(this->index++).StaticCast< hx::Class >();
            		}
            		else {
HXDLIN( 101)			return null();
            		}
HXDLIN( 101)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSuite_obj,next,return )

void TestSuite_obj::repeat(){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_110_repeat)
HXDLIN( 110)		if ((this->index > (int)0)) {
HXDLIN( 110)			this->index--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSuite_obj,repeat,(void))

void TestSuite_obj::sortTests(){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_115_sortTests)
HXDLIN( 115)		this->tests->sort(this->sortByName_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSuite_obj,sortTests,(void))

int TestSuite_obj::sortByName(hx::Class x,hx::Class y){
            	HX_STACKFRAME(&_hx_pos_1066d2e703a4ceb6_119_sortByName)
HXLINE( 120)		::String xName = ::Type_obj::getClassName(x);
HXLINE( 121)		::String yName = ::Type_obj::getClassName(y);
HXLINE( 122)		if ((xName == yName)) {
HXLINE( 122)			return (int)0;
            		}
HXLINE( 123)		if ((xName > yName)) {
HXLINE( 123)			return (int)1;
            		}
HXLINE( 124)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestSuite_obj,sortByName,return )


hx::ObjectPtr< TestSuite_obj > TestSuite_obj::__new() {
	hx::ObjectPtr< TestSuite_obj > __this = new TestSuite_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TestSuite_obj > TestSuite_obj::__alloc(hx::Ctx *_hx_ctx) {
	TestSuite_obj *__this = (TestSuite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TestSuite_obj), true, "massive.munit.TestSuite"));
	*(void **)__this = TestSuite_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TestSuite_obj::TestSuite_obj()
{
}

void TestSuite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestSuite);
	HX_MARK_MEMBER_NAME(tests,"tests");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_END_CLASS();
}

void TestSuite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tests,"tests");
	HX_VISIT_MEMBER_NAME(index,"index");
}

hx::Val TestSuite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tests") ) { return hx::Val( tests ); }
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { return hx::Val( repeat_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sortTests") ) { return hx::Val( sortTests_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByName") ) { return hx::Val( sortByName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestSuite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tests") ) { tests=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestSuite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d"));
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestSuite_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TestSuite_obj,tests),HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d")},
	{hx::fsInt,(int)offsetof(TestSuite_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestSuite_obj_sStaticStorageInfo = 0;
#endif

static ::String TestSuite_obj_sMemberFields[] = {
	HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d"),
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"),
	HX_HCSTRING("sortTests","\xa3","\x53","\x09","\x16"),
	HX_HCSTRING("sortByName","\xc0","\xa1","\x33","\x6b"),
	::String(null()) };

static void TestSuite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestSuite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestSuite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestSuite_obj::__mClass,"__mClass");
};

#endif

hx::Class TestSuite_obj::__mClass;

void TestSuite_obj::__register()
{
	hx::Object *dummy = new TestSuite_obj;
	TestSuite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.TestSuite","\x9f","\x52","\x13","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestSuite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestSuite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestSuite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestSuite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestSuite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestSuite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace munit
