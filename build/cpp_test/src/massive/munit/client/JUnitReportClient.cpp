// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_munit_AssertionException
#include <massive/munit/AssertionException.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_MUnitException
#include <massive/munit/MUnitException.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_client_JUnitReportClient
#include <massive/munit/client/JUnitReportClient.h>
#endif
#ifndef INCLUDED_massive_munit_util_MathUtil
#include <massive/munit/util/MathUtil.h>
#endif
#ifndef INCLUDED_massive_munit_util_Timer
#include <massive/munit/util/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ca736340de789d64_90_new,"massive.munit.client.JUnitReportClient","new",0xf4c7ac23,"massive.munit.client.JUnitReportClient.new","massive/munit/client/JUnitReportClient.hx",90,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_63_get_completionHandler,"massive.munit.client.JUnitReportClient","get_completionHandler",0xf0ddf368,"massive.munit.client.JUnitReportClient.get_completionHandler","massive/munit/client/JUnitReportClient.hx",63,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_67_set_completionHandler,"massive.munit.client.JUnitReportClient","set_completionHandler",0x44e6c174,"massive.munit.client.JUnitReportClient.set_completionHandler","massive/munit/client/JUnitReportClient.hx",67,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_106_setCurrentTestClass,"massive.munit.client.JUnitReportClient","setCurrentTestClass",0x9a215892,"massive.munit.client.JUnitReportClient.setCurrentTestClass","massive/munit/client/JUnitReportClient.hx",106,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_119_addPass,"massive.munit.client.JUnitReportClient","addPass",0x38afa0d5,"massive.munit.client.JUnitReportClient.addPass","massive/munit/client/JUnitReportClient.hx",119,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_131_addFail,"massive.munit.client.JUnitReportClient","addFail",0x321375e2,"massive.munit.client.JUnitReportClient.addFail","massive/munit/client/JUnitReportClient.hx",131,0xdfe087ac)
static const ::String _hx_array_data_95985eb1_6[] = {
	HX_("</testcase>",29,af,c2,f8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_148_addError,"massive.munit.client.JUnitReportClient","addError",0x16d09344,"massive.munit.client.JUnitReportClient.addError","massive/munit/client/JUnitReportClient.hx",148,0xdfe087ac)
static const ::String _hx_array_data_95985eb1_8[] = {
	HX_("</testcase>",29,af,c2,f8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_164_addIgnore,"massive.munit.client.JUnitReportClient","addIgnore",0x21107e16,"massive.munit.client.JUnitReportClient.addIgnore","massive/munit/client/JUnitReportClient.hx",164,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_184_reportFinalStatistics,"massive.munit.client.JUnitReportClient","reportFinalStatistics",0x22dba868,"massive.munit.client.JUnitReportClient.reportFinalStatistics","massive/munit/client/JUnitReportClient.hx",184,0xdfe087ac)
static const ::String _hx_array_data_95985eb1_11[] = {
	HX_("</testsuites>",7e,91,ac,92),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_191_startTestSuite,"massive.munit.client.JUnitReportClient","startTestSuite",0x0efc5161,"massive.munit.client.JUnitReportClient.startTestSuite","massive/munit/client/JUnitReportClient.hx",191,0xdfe087ac)
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_200_endTestSuite,"massive.munit.client.JUnitReportClient","endTestSuite",0xef311988,"massive.munit.client.JUnitReportClient.endTestSuite","massive/munit/client/JUnitReportClient.hx",200,0xdfe087ac)
static const ::String _hx_array_data_95985eb1_14[] = {
	HX_("<system-out></system-out>",e9,a5,bd,95),
};
static const ::String _hx_array_data_95985eb1_15[] = {
	HX_("<system-err></system-err>",49,4c,11,f2),
};
static const ::String _hx_array_data_95985eb1_16[] = {
	HX_("</testsuite>",8b,56,bf,94),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ca736340de789d64_49_boot,"massive.munit.client.JUnitReportClient","boot",0x3207f30f,"massive.munit.client.JUnitReportClient.boot","massive/munit/client/JUnitReportClient.hx",49,0xdfe087ac)
namespace massive{
namespace munit{
namespace client{

void JUnitReportClient_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ca736340de789d64_90_new)
HXLINE(  91)		this->id = HX_("junit",ee,47,23,56);
HXLINE(  92)		this->currentTestClass = HX_("",00,00,00,00);
HXLINE(  93)		this->newline = HX_("\n",0a,00,00,00);
HXLINE(  94)		this->testSuiteXML = null();
HXLINE(  95)		this->xml =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  96)		{
HXLINE(  96)			 ::StringBuf _this = this->xml;
HXDLIN(  96)			::String x = (HX_("<testsuites>",55,b8,47,90) + this->newline);
HXDLIN(  96)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE(  96)				_this->flush();
            			}
HXDLIN(  96)			if (hx::IsNull( _this->b )) {
HXLINE(  96)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE(  96)				::Array< ::String > _this1 = _this->b;
HXDLIN(  96)				_this1->push(::Std_obj::string(x));
            			}
            		}
            	}

Dynamic JUnitReportClient_obj::__CreateEmpty() { return new JUnitReportClient_obj; }

void *JUnitReportClient_obj::_hx_vtable = 0;

Dynamic JUnitReportClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< JUnitReportClient_obj > _hx_result = new JUnitReportClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool JUnitReportClient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x603648b1;
}

static ::massive::munit::IAdvancedTestResultClient_obj _hx_massive_munit_client_JUnitReportClient__hx_massive_munit_IAdvancedTestResultClient= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::JUnitReportClient_obj::set_completionHandler,
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::JUnitReportClient_obj::get_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(int,int,int,int,int,Float))&::massive::munit::client::JUnitReportClient_obj::reportFinalStatistics,
	( void (hx::Object::*)(::String))&::massive::munit::client::JUnitReportClient_obj::setCurrentTestClass,
};

static ::massive::munit::ITestResultClient_obj _hx_massive_munit_client_JUnitReportClient__hx_massive_munit_ITestResultClient= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::JUnitReportClient_obj::set_completionHandler,
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::JUnitReportClient_obj::get_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(int,int,int,int,int,Float))&::massive::munit::client::JUnitReportClient_obj::reportFinalStatistics,
};

void *JUnitReportClient_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xce173438: return &_hx_massive_munit_client_JUnitReportClient__hx_massive_munit_IAdvancedTestResultClient;
		case (int)0xe35dae76: return &_hx_massive_munit_client_JUnitReportClient__hx_massive_munit_ITestResultClient;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic JUnitReportClient_obj::get_completionHandler(){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_63_get_completionHandler)
HXDLIN(  63)		return this->completionHandler;
            	}


HX_DEFINE_DYNAMIC_FUNC0(JUnitReportClient_obj,get_completionHandler,return )

 ::Dynamic JUnitReportClient_obj::set_completionHandler( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_67_set_completionHandler)
HXDLIN(  67)		return (this->completionHandler = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,set_completionHandler,return )

void JUnitReportClient_obj::setCurrentTestClass(::String className){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_106_setCurrentTestClass)
HXLINE( 107)		if ((this->currentTestClass == className)) {
HXLINE( 107)			return;
            		}
HXLINE( 108)		if (hx::IsNotNull( this->currentTestClass )) {
HXLINE( 108)			this->endTestSuite();
            		}
HXLINE( 109)		this->currentTestClass = className;
HXLINE( 110)		if (hx::IsNotNull( this->currentTestClass )) {
HXLINE( 110)			this->startTestSuite();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,setCurrentTestClass,(void))

void JUnitReportClient_obj::addPass( ::massive::munit::TestResult result){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_119_addPass)
HXLINE( 120)		this->suitePassCount++;
HXLINE( 121)		{
HXLINE( 121)			 ::StringBuf _this = this->testSuiteXML;
HXDLIN( 121)			::String x = ((((HX_("<testcase classname=\"",a6,af,2f,ad) + result->className) + HX_("\" name=\"",8e,10,db,e8)) + result->name) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 121)			::String x1 = ((x + ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)5)) + HX_("\"/>",d1,f5,19,00));
HXDLIN( 121)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 121)				_this->flush();
            			}
HXDLIN( 121)			if (hx::IsNull( _this->b )) {
HXLINE( 121)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 121)				::Array< ::String > _this1 = _this->b;
HXDLIN( 121)				_this1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 122)		{
HXLINE( 122)			 ::StringBuf _this2 = this->testSuiteXML;
HXDLIN( 122)			::String x2 = this->newline;
HXDLIN( 122)			if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 122)				_this2->flush();
            			}
HXDLIN( 122)			if (hx::IsNull( _this2->b )) {
HXLINE( 122)				_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            			}
            			else {
HXLINE( 122)				::Array< ::String > _this3 = _this2->b;
HXDLIN( 122)				_this3->push(::Std_obj::string(x2));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addPass,(void))

void JUnitReportClient_obj::addFail( ::massive::munit::TestResult result){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_131_addFail)
HXLINE( 132)		this->suiteFailCount++;
HXLINE( 134)		{
HXLINE( 134)			 ::StringBuf _this = this->testSuiteXML;
HXDLIN( 134)			::String x = ((((HX_("<testcase classname=\"",a6,af,2f,ad) + result->className) + HX_("\" name=\"",8e,10,db,e8)) + result->name) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 134)			::String x1 = ((x + ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)5)) + HX_("\">",dc,1d,00,00));
HXDLIN( 134)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 134)				_this->flush();
            			}
HXDLIN( 134)			if (hx::IsNull( _this->b )) {
HXLINE( 134)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 134)				::Array< ::String > _this1 = _this->b;
HXDLIN( 134)				_this1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 135)		{
HXLINE( 135)			 ::StringBuf _this2 = this->testSuiteXML;
HXDLIN( 135)			::String x2 = this->newline;
HXDLIN( 135)			if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 135)				_this2->flush();
            			}
HXDLIN( 135)			if (hx::IsNull( _this2->b )) {
HXLINE( 135)				_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            			}
            			else {
HXLINE( 135)				::Array< ::String > _this3 = _this2->b;
HXDLIN( 135)				_this3->push(::Std_obj::string(x2));
            			}
            		}
HXLINE( 136)		{
HXLINE( 136)			 ::StringBuf _this4 = this->testSuiteXML;
HXDLIN( 136)			::String x3 = ((((HX_("<failure message=\"",ba,13,8c,64) + result->failure->message) + HX_("\" type=\"",bd,ca,98,22)) + result->failure->type) + HX_("\">",dc,1d,00,00));
HXDLIN( 136)			::String x4 = ((x3 + ::Std_obj::string(result->failure)) + HX_("</failure>",27,30,ee,cf));
HXDLIN( 136)			if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 136)				_this4->flush();
            			}
HXDLIN( 136)			if (hx::IsNull( _this4->b )) {
HXLINE( 136)				_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            			}
            			else {
HXLINE( 136)				::Array< ::String > _this5 = _this4->b;
HXDLIN( 136)				_this5->push(::Std_obj::string(x4));
            			}
            		}
HXLINE( 137)		{
HXLINE( 137)			 ::StringBuf _this6 = this->testSuiteXML;
HXDLIN( 137)			::String x5 = this->newline;
HXDLIN( 137)			if (hx::IsNotNull( _this6->charBuf )) {
HXLINE( 137)				_this6->flush();
            			}
HXDLIN( 137)			if (hx::IsNull( _this6->b )) {
HXLINE( 137)				_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            			}
            			else {
HXLINE( 137)				::Array< ::String > _this7 = _this6->b;
HXDLIN( 137)				_this7->push(::Std_obj::string(x5));
            			}
            		}
HXLINE( 138)		{
HXLINE( 138)			 ::StringBuf _this8 = this->testSuiteXML;
HXDLIN( 138)			if (hx::IsNotNull( _this8->charBuf )) {
HXLINE( 138)				_this8->flush();
            			}
HXDLIN( 138)			if (hx::IsNull( _this8->b )) {
HXLINE( 138)				_this8->b = ::Array_obj< ::String >::fromData( _hx_array_data_95985eb1_6,1);
            			}
            			else {
HXLINE( 138)				_this8->b->push(HX_("</testcase>",29,af,c2,f8));
            			}
            		}
HXLINE( 139)		{
HXLINE( 139)			 ::StringBuf _this9 = this->testSuiteXML;
HXDLIN( 139)			::String x6 = this->newline;
HXDLIN( 139)			if (hx::IsNotNull( _this9->charBuf )) {
HXLINE( 139)				_this9->flush();
            			}
HXDLIN( 139)			if (hx::IsNull( _this9->b )) {
HXLINE( 139)				_this9->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
            			}
            			else {
HXLINE( 139)				::Array< ::String > _this10 = _this9->b;
HXDLIN( 139)				_this10->push(::Std_obj::string(x6));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addFail,(void))

void JUnitReportClient_obj::addError( ::massive::munit::TestResult result){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_148_addError)
HXLINE( 149)		this->suiteErrorCount++;
HXLINE( 150)		{
HXLINE( 150)			 ::StringBuf _this = this->testSuiteXML;
HXDLIN( 150)			::String x = ((((HX_("<testcase classname=\"",a6,af,2f,ad) + result->className) + HX_("\" name=\"",8e,10,db,e8)) + result->name) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 150)			::String x1 = ((x + ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)5)) + HX_("\">",dc,1d,00,00));
HXDLIN( 150)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 150)				_this->flush();
            			}
HXDLIN( 150)			if (hx::IsNull( _this->b )) {
HXLINE( 150)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 150)				::Array< ::String > _this1 = _this->b;
HXDLIN( 150)				_this1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 151)		{
HXLINE( 151)			 ::StringBuf _this2 = this->testSuiteXML;
HXDLIN( 151)			::String x2 = this->newline;
HXDLIN( 151)			if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 151)				_this2->flush();
            			}
HXDLIN( 151)			if (hx::IsNull( _this2->b )) {
HXLINE( 151)				_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            			}
            			else {
HXLINE( 151)				::Array< ::String > _this3 = _this2->b;
HXDLIN( 151)				_this3->push(::Std_obj::string(x2));
            			}
            		}
HXLINE( 152)		{
HXLINE( 152)			 ::StringBuf _this4 = this->testSuiteXML;
HXDLIN( 152)			::String x3 = ((HX_("<error message=\"",b8,9f,f1,4e) + ::Std_obj::string( ::Dynamic(result->error->__Field(HX_("message",c7,35,11,9a),hx::paccDynamic)))) + HX_("\" type=\"",bd,ca,98,22));
HXDLIN( 152)			::String x4 = ((x3 + ::Std_obj::string( ::Dynamic(result->error->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)))) + HX_("\">",dc,1d,00,00));
HXDLIN( 152)			::String x5 = ((x4 + ::Std_obj::string(result->error)) + HX_("</error>",29,10,ac,5b));
HXDLIN( 152)			if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 152)				_this4->flush();
            			}
HXDLIN( 152)			if (hx::IsNull( _this4->b )) {
HXLINE( 152)				_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            			}
            			else {
HXLINE( 152)				::Array< ::String > _this5 = _this4->b;
HXDLIN( 152)				_this5->push(::Std_obj::string(x5));
            			}
            		}
HXLINE( 153)		{
HXLINE( 153)			 ::StringBuf _this6 = this->testSuiteXML;
HXDLIN( 153)			::String x6 = this->newline;
HXDLIN( 153)			if (hx::IsNotNull( _this6->charBuf )) {
HXLINE( 153)				_this6->flush();
            			}
HXDLIN( 153)			if (hx::IsNull( _this6->b )) {
HXLINE( 153)				_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
            			}
            			else {
HXLINE( 153)				::Array< ::String > _this7 = _this6->b;
HXDLIN( 153)				_this7->push(::Std_obj::string(x6));
            			}
            		}
HXLINE( 154)		{
HXLINE( 154)			 ::StringBuf _this8 = this->testSuiteXML;
HXDLIN( 154)			if (hx::IsNotNull( _this8->charBuf )) {
HXLINE( 154)				_this8->flush();
            			}
HXDLIN( 154)			if (hx::IsNull( _this8->b )) {
HXLINE( 154)				_this8->b = ::Array_obj< ::String >::fromData( _hx_array_data_95985eb1_8,1);
            			}
            			else {
HXLINE( 154)				_this8->b->push(HX_("</testcase>",29,af,c2,f8));
            			}
            		}
HXLINE( 155)		{
HXLINE( 155)			 ::StringBuf _this9 = this->testSuiteXML;
HXDLIN( 155)			::String x7 = this->newline;
HXDLIN( 155)			if (hx::IsNotNull( _this9->charBuf )) {
HXLINE( 155)				_this9->flush();
            			}
HXDLIN( 155)			if (hx::IsNull( _this9->b )) {
HXLINE( 155)				_this9->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x7));
            			}
            			else {
HXLINE( 155)				::Array< ::String > _this10 = _this9->b;
HXDLIN( 155)				_this10->push(::Std_obj::string(x7));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addError,(void))

void JUnitReportClient_obj::addIgnore( ::massive::munit::TestResult result){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_164_addIgnore)
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addIgnore,(void))

 ::Dynamic JUnitReportClient_obj::reportFinalStatistics(int testCount,int passCount,int failCount,int errorCount,int ignoreCount,Float time){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_184_reportFinalStatistics)
HXLINE( 185)		{
HXLINE( 185)			 ::StringBuf _this = this->xml;
HXDLIN( 185)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 185)				_this->flush();
            			}
HXDLIN( 185)			if (hx::IsNull( _this->b )) {
HXLINE( 185)				_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_95985eb1_11,1);
            			}
            			else {
HXLINE( 185)				_this->b->push(HX_("</testsuites>",7e,91,ac,92));
            			}
            		}
HXLINE( 186)		if (hx::IsNotNull( this->get_completionHandler() )) {
HXLINE( 186)			this->get_completionHandler()(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 187)		return this->xml->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC6(JUnitReportClient_obj,reportFinalStatistics,return )

void JUnitReportClient_obj::startTestSuite(){
            	HX_GC_STACKFRAME(&_hx_pos_ca736340de789d64_191_startTestSuite)
HXLINE( 192)		this->suitePassCount = (int)0;
HXLINE( 193)		this->suiteFailCount = (int)0;
HXLINE( 194)		this->suiteErrorCount = (int)0;
HXLINE( 195)		this->suiteExecutionTime = ::massive::munit::util::Timer_obj::stamp();
HXLINE( 196)		this->testSuiteXML =  ::StringBuf_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(JUnitReportClient_obj,startTestSuite,(void))

void JUnitReportClient_obj::endTestSuite(){
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_200_endTestSuite)
HXLINE( 201)		if (hx::IsNull( this->testSuiteXML )) {
HXLINE( 201)			return;
            		}
HXLINE( 202)		int suiteTestCount = ((this->suitePassCount + this->suiteFailCount) + this->suiteErrorCount);
HXLINE( 203)		Float _hx_tmp = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 203)		this->suiteExecutionTime = (_hx_tmp - this->suiteExecutionTime);
HXLINE( 204)		Float time = ::massive::munit::util::MathUtil_obj::round(this->suiteExecutionTime,(int)5);
HXLINE( 205)		{
HXLINE( 205)			 ::StringBuf _this = this->xml;
HXDLIN( 205)			::String x = ((((((((((HX_("<testsuite errors=\"",26,b7,33,f7) + this->suiteErrorCount) + HX_("\" failures=\"",ac,c9,a6,11)) + this->suiteFailCount) + HX_("\" hostname=\"\" name=\"",84,4b,4d,21)) + this->currentTestClass) + HX_("\" tests=\"",68,65,3c,e8)) + suiteTestCount) + HX_("\" time=\"",d0,de,33,ea)) + time) + HX_("\" timestamp=\"",9d,ca,4c,52));
HXDLIN( 205)			::String x1 = ((x + ::Std_obj::string(::Date_obj::now())) + HX_("\">",dc,1d,00,00));
HXDLIN( 205)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 205)				_this->flush();
            			}
HXDLIN( 205)			if (hx::IsNull( _this->b )) {
HXLINE( 205)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 205)				::Array< ::String > _this1 = _this->b;
HXDLIN( 205)				_this1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 206)		{
HXLINE( 206)			 ::StringBuf _this2 = this->xml;
HXDLIN( 206)			::String x2 = this->newline;
HXDLIN( 206)			if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 206)				_this2->flush();
            			}
HXDLIN( 206)			if (hx::IsNull( _this2->b )) {
HXLINE( 206)				_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            			}
            			else {
HXLINE( 206)				::Array< ::String > _this3 = _this2->b;
HXDLIN( 206)				_this3->push(::Std_obj::string(x2));
            			}
            		}
HXLINE( 207)		{
HXLINE( 207)			 ::StringBuf _this4 = this->testSuiteXML;
HXDLIN( 207)			if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 207)				_this4->flush();
            			}
HXDLIN( 207)			if (hx::IsNull( _this4->b )) {
HXLINE( 207)				_this4->b = ::Array_obj< ::String >::fromData( _hx_array_data_95985eb1_14,1);
            			}
            			else {
HXLINE( 207)				_this4->b->push(HX_("<system-out></system-out>",e9,a5,bd,95));
            			}
            		}
HXDLIN( 207)		{
HXLINE( 207)			 ::StringBuf _this5 = this->testSuiteXML;
HXDLIN( 207)			::String x3 = this->newline;
HXDLIN( 207)			if (hx::IsNotNull( _this5->charBuf )) {
HXLINE( 207)				_this5->flush();
            			}
HXDLIN( 207)			if (hx::IsNull( _this5->b )) {
HXLINE( 207)				_this5->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            			}
            			else {
HXLINE( 207)				::Array< ::String > _this6 = _this5->b;
HXDLIN( 207)				_this6->push(::Std_obj::string(x3));
            			}
            		}
HXLINE( 208)		{
HXLINE( 208)			 ::StringBuf _this7 = this->testSuiteXML;
HXDLIN( 208)			if (hx::IsNotNull( _this7->charBuf )) {
HXLINE( 208)				_this7->flush();
            			}
HXDLIN( 208)			if (hx::IsNull( _this7->b )) {
HXLINE( 208)				_this7->b = ::Array_obj< ::String >::fromData( _hx_array_data_95985eb1_15,1);
            			}
            			else {
HXLINE( 208)				_this7->b->push(HX_("<system-err></system-err>",49,4c,11,f2));
            			}
            		}
HXDLIN( 208)		{
HXLINE( 208)			 ::StringBuf _this8 = this->testSuiteXML;
HXDLIN( 208)			::String x4 = this->newline;
HXDLIN( 208)			if (hx::IsNotNull( _this8->charBuf )) {
HXLINE( 208)				_this8->flush();
            			}
HXDLIN( 208)			if (hx::IsNull( _this8->b )) {
HXLINE( 208)				_this8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            			}
            			else {
HXLINE( 208)				::Array< ::String > _this9 = _this8->b;
HXDLIN( 208)				_this9->push(::Std_obj::string(x4));
            			}
            		}
HXLINE( 209)		{
HXLINE( 209)			 ::StringBuf _this10 = this->xml;
HXDLIN( 209)			::String x5 = this->testSuiteXML->toString();
HXDLIN( 209)			if (hx::IsNotNull( _this10->charBuf )) {
HXLINE( 209)				_this10->flush();
            			}
HXDLIN( 209)			if (hx::IsNull( _this10->b )) {
HXLINE( 209)				_this10->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            			}
            			else {
HXLINE( 209)				::Array< ::String > _this11 = _this10->b;
HXDLIN( 209)				_this11->push(::Std_obj::string(x5));
            			}
            		}
HXLINE( 210)		{
HXLINE( 210)			 ::StringBuf _this12 = this->xml;
HXDLIN( 210)			if (hx::IsNotNull( _this12->charBuf )) {
HXLINE( 210)				_this12->flush();
            			}
HXDLIN( 210)			if (hx::IsNull( _this12->b )) {
HXLINE( 210)				_this12->b = ::Array_obj< ::String >::fromData( _hx_array_data_95985eb1_16,1);
            			}
            			else {
HXLINE( 210)				_this12->b->push(HX_("</testsuite>",8b,56,bf,94));
            			}
            		}
HXLINE( 211)		{
HXLINE( 211)			 ::StringBuf _this13 = this->xml;
HXDLIN( 211)			::String x6 = this->newline;
HXDLIN( 211)			if (hx::IsNotNull( _this13->charBuf )) {
HXLINE( 211)				_this13->flush();
            			}
HXDLIN( 211)			if (hx::IsNull( _this13->b )) {
HXLINE( 211)				_this13->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
            			}
            			else {
HXLINE( 211)				::Array< ::String > _this14 = _this13->b;
HXDLIN( 211)				_this14->push(::Std_obj::string(x6));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(JUnitReportClient_obj,endTestSuite,(void))

::String JUnitReportClient_obj::DEFAULT_ID;


hx::ObjectPtr< JUnitReportClient_obj > JUnitReportClient_obj::__new() {
	hx::ObjectPtr< JUnitReportClient_obj > __this = new JUnitReportClient_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< JUnitReportClient_obj > JUnitReportClient_obj::__alloc(hx::Ctx *_hx_ctx) {
	JUnitReportClient_obj *__this = (JUnitReportClient_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(JUnitReportClient_obj), true, "massive.munit.client.JUnitReportClient"));
	*(void **)__this = JUnitReportClient_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

JUnitReportClient_obj::JUnitReportClient_obj()
{
}

void JUnitReportClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(JUnitReportClient);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(completionHandler,"completionHandler");
	HX_MARK_MEMBER_NAME(newline,"newline");
	HX_MARK_MEMBER_NAME(xml,"xml");
	HX_MARK_MEMBER_NAME(testSuiteXML,"testSuiteXML");
	HX_MARK_MEMBER_NAME(currentTestClass,"currentTestClass");
	HX_MARK_MEMBER_NAME(suitePassCount,"suitePassCount");
	HX_MARK_MEMBER_NAME(suiteFailCount,"suiteFailCount");
	HX_MARK_MEMBER_NAME(suiteErrorCount,"suiteErrorCount");
	HX_MARK_MEMBER_NAME(suiteExecutionTime,"suiteExecutionTime");
	HX_MARK_END_CLASS();
}

void JUnitReportClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(completionHandler,"completionHandler");
	HX_VISIT_MEMBER_NAME(newline,"newline");
	HX_VISIT_MEMBER_NAME(xml,"xml");
	HX_VISIT_MEMBER_NAME(testSuiteXML,"testSuiteXML");
	HX_VISIT_MEMBER_NAME(currentTestClass,"currentTestClass");
	HX_VISIT_MEMBER_NAME(suitePassCount,"suitePassCount");
	HX_VISIT_MEMBER_NAME(suiteFailCount,"suiteFailCount");
	HX_VISIT_MEMBER_NAME(suiteErrorCount,"suiteErrorCount");
	HX_VISIT_MEMBER_NAME(suiteExecutionTime,"suiteExecutionTime");
}

hx::Val JUnitReportClient_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { return hx::Val( xml ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"newline") ) { return hx::Val( newline ); }
		if (HX_FIELD_EQ(inName,"addPass") ) { return hx::Val( addPass_dyn() ); }
		if (HX_FIELD_EQ(inName,"addFail") ) { return hx::Val( addFail_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addError") ) { return hx::Val( addError_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addIgnore") ) { return hx::Val( addIgnore_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSuiteXML") ) { return hx::Val( testSuiteXML ); }
		if (HX_FIELD_EQ(inName,"endTestSuite") ) { return hx::Val( endTestSuite_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"suitePassCount") ) { return hx::Val( suitePassCount ); }
		if (HX_FIELD_EQ(inName,"suiteFailCount") ) { return hx::Val( suiteFailCount ); }
		if (HX_FIELD_EQ(inName,"startTestSuite") ) { return hx::Val( startTestSuite_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"suiteErrorCount") ) { return hx::Val( suiteErrorCount ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTestClass") ) { return hx::Val( currentTestClass ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { return hx::Val( inCallProp == hx::paccAlways ? get_completionHandler() : completionHandler ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"suiteExecutionTime") ) { return hx::Val( suiteExecutionTime ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setCurrentTestClass") ) { return hx::Val( setCurrentTestClass_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_completionHandler") ) { return hx::Val( get_completionHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_completionHandler") ) { return hx::Val( set_completionHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"reportFinalStatistics") ) { return hx::Val( reportFinalStatistics_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val JUnitReportClient_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { xml=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"newline") ) { newline=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSuiteXML") ) { testSuiteXML=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"suitePassCount") ) { suitePassCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"suiteFailCount") ) { suiteFailCount=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"suiteErrorCount") ) { suiteErrorCount=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTestClass") ) { currentTestClass=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_completionHandler(inValue.Cast<  ::Dynamic >()) );completionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"suiteExecutionTime") ) { suiteExecutionTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void JUnitReportClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("newline","\x54","\x98","\xa6","\x0c"));
	outFields->push(HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00"));
	outFields->push(HX_HCSTRING("testSuiteXML","\x71","\x74","\xf9","\x2e"));
	outFields->push(HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04"));
	outFields->push(HX_HCSTRING("suitePassCount","\x66","\x44","\xd1","\xac"));
	outFields->push(HX_HCSTRING("suiteFailCount","\x39","\x00","\x0d","\x03"));
	outFields->push(HX_HCSTRING("suiteErrorCount","\xbf","\x8c","\xc9","\xda"));
	outFields->push(HX_HCSTRING("suiteExecutionTime","\xed","\x8d","\xa9","\x43"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo JUnitReportClient_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(JUnitReportClient_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(JUnitReportClient_obj,completionHandler),HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b")},
	{hx::fsString,(int)offsetof(JUnitReportClient_obj,newline),HX_HCSTRING("newline","\x54","\x98","\xa6","\x0c")},
	{hx::fsObject /*::StringBuf*/ ,(int)offsetof(JUnitReportClient_obj,xml),HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00")},
	{hx::fsObject /*::StringBuf*/ ,(int)offsetof(JUnitReportClient_obj,testSuiteXML),HX_HCSTRING("testSuiteXML","\x71","\x74","\xf9","\x2e")},
	{hx::fsString,(int)offsetof(JUnitReportClient_obj,currentTestClass),HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04")},
	{hx::fsInt,(int)offsetof(JUnitReportClient_obj,suitePassCount),HX_HCSTRING("suitePassCount","\x66","\x44","\xd1","\xac")},
	{hx::fsInt,(int)offsetof(JUnitReportClient_obj,suiteFailCount),HX_HCSTRING("suiteFailCount","\x39","\x00","\x0d","\x03")},
	{hx::fsInt,(int)offsetof(JUnitReportClient_obj,suiteErrorCount),HX_HCSTRING("suiteErrorCount","\xbf","\x8c","\xc9","\xda")},
	{hx::fsFloat,(int)offsetof(JUnitReportClient_obj,suiteExecutionTime),HX_HCSTRING("suiteExecutionTime","\xed","\x8d","\xa9","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo JUnitReportClient_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &JUnitReportClient_obj::DEFAULT_ID,HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String JUnitReportClient_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b"),
	HX_HCSTRING("get_completionHandler","\xe5","\xea","\x60","\xda"),
	HX_HCSTRING("set_completionHandler","\xf1","\xb8","\x69","\x2e"),
	HX_HCSTRING("newline","\x54","\x98","\xa6","\x0c"),
	HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00"),
	HX_HCSTRING("testSuiteXML","\x71","\x74","\xf9","\x2e"),
	HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04"),
	HX_HCSTRING("suitePassCount","\x66","\x44","\xd1","\xac"),
	HX_HCSTRING("suiteFailCount","\x39","\x00","\x0d","\x03"),
	HX_HCSTRING("suiteErrorCount","\xbf","\x8c","\xc9","\xda"),
	HX_HCSTRING("suiteExecutionTime","\xed","\x8d","\xa9","\x43"),
	HX_HCSTRING("setCurrentTestClass","\xcf","\x86","\x4e","\xfb"),
	HX_HCSTRING("addPass","\x92","\x27","\x8f","\x86"),
	HX_HCSTRING("addFail","\x9f","\xfc","\xf2","\x7f"),
	HX_HCSTRING("addError","\xe7","\xf1","\x86","\xec"),
	HX_HCSTRING("addIgnore","\x13","\xee","\xec","\x4a"),
	HX_HCSTRING("reportFinalStatistics","\xe5","\x9f","\x5e","\x0c"),
	HX_HCSTRING("startTestSuite","\x44","\xcc","\xf7","\x6c"),
	HX_HCSTRING("endTestSuite","\xab","\x05","\xbf","\x5c"),
	::String(null()) };

static void JUnitReportClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JUnitReportClient_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(JUnitReportClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JUnitReportClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JUnitReportClient_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(JUnitReportClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#endif

hx::Class JUnitReportClient_obj::__mClass;

static ::String JUnitReportClient_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18"),
	::String(null())
};

void JUnitReportClient_obj::__register()
{
	hx::Object *dummy = new JUnitReportClient_obj;
	JUnitReportClient_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.client.JUnitReportClient","\xb1","\x5e","\x98","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = JUnitReportClient_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(JUnitReportClient_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(JUnitReportClient_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< JUnitReportClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JUnitReportClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JUnitReportClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JUnitReportClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void JUnitReportClient_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ca736340de789d64_49_boot)
HXDLIN(  49)		DEFAULT_ID = HX_("junit",ee,47,23,56);
            	}
}

} // end namespace massive
} // end namespace munit
} // end namespace client
