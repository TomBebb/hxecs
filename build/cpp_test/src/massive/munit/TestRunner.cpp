// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_munit_Assert
#include <massive/munit/Assert.h>
#endif
#ifndef INCLUDED_massive_munit_AssertionException
#include <massive/munit/AssertionException.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_MUnitException
#include <massive/munit/MUnitException.h>
#endif
#ifndef INCLUDED_massive_munit_TestClassHelper
#include <massive/munit/TestClassHelper.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_TestRunner
#include <massive/munit/TestRunner.h>
#endif
#ifndef INCLUDED_massive_munit_TestSuite
#include <massive/munit/TestSuite.h>
#endif
#ifndef INCLUDED_massive_munit_UnhandledException
#include <massive/munit/UnhandledException.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncDelegate
#include <massive/munit/async/AsyncDelegate.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncFactory
#include <massive/munit/async/AsyncFactory.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncTimeoutException
#include <massive/munit/async/AsyncTimeoutException.h>
#endif
#ifndef INCLUDED_massive_munit_async_IAsyncDelegateObserver
#include <massive/munit/async/IAsyncDelegateObserver.h>
#endif
#ifndef INCLUDED_massive_munit_async_MissingAsyncDelegateException
#include <massive/munit/async/MissingAsyncDelegateException.h>
#endif
#ifndef INCLUDED_massive_munit_util_Timer
#include <massive/munit/util/Timer.h>
#endif
#ifndef INCLUDED_org_hamcrest_AssertionException
#include <org/hamcrest/AssertionException.h>
#endif
#ifndef INCLUDED_org_hamcrest_Exception
#include <org/hamcrest/Exception.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c964b83bd540393e_87_new,"massive.munit.TestRunner","new",0x95fc899b,"massive.munit.TestRunner.new","massive/munit/TestRunner.hx",87,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_98_get_clientCount,"massive.munit.TestRunner","get_clientCount",0x892197d6,"massive.munit.TestRunner.get_clientCount","massive/munit/TestRunner.hx",98,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_116_set_asyncFactory,"massive.munit.TestRunner","set_asyncFactory",0x63769cd0,"massive.munit.TestRunner.set_asyncFactory","massive/munit/TestRunner.hx",116,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_149_addResultClient,"massive.munit.TestRunner","addResultClient",0x46b4bc84,"massive.munit.TestRunner.addResultClient","massive/munit/TestRunner.hx",149,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_161_debug,"massive.munit.TestRunner","debug",0xb355104e,"massive.munit.TestRunner.debug","massive/munit/TestRunner.hx",161,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_191_run,"massive.munit.TestRunner","run",0x95ffa086,"massive.munit.TestRunner.run","massive/munit/TestRunner.hx",191,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_172_run,"massive.munit.TestRunner","run",0x95ffa086,"massive.munit.TestRunner.run","massive/munit/TestRunner.hx",172,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_208_execute,"massive.munit.TestRunner","execute",0x6faa7cf0,"massive.munit.TestRunner.execute","massive/munit/TestRunner.hx",208,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_247_executeTestCases,"massive.munit.TestRunner","executeTestCases",0x4eec3f01,"massive.munit.TestRunner.executeTestCases","massive/munit/TestRunner.hx",247,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_277_executeTestCase,"massive.munit.TestRunner","executeTestCase",0xf9774d32,"massive.munit.TestRunner.executeTestCase","massive/munit/TestRunner.hx",277,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_339_clientCompletionHandler,"massive.munit.TestRunner","clientCompletionHandler",0x510871fe,"massive.munit.TestRunner.clientCompletionHandler","massive/munit/TestRunner.hx",339,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_341_clientCompletionHandler,"massive.munit.TestRunner","clientCompletionHandler",0x510871fe,"massive.munit.TestRunner.clientCompletionHandler","massive/munit/TestRunner.hx",341,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_352_asyncResponseHandler,"massive.munit.TestRunner","asyncResponseHandler",0x97c52bd2,"massive.munit.TestRunner.asyncResponseHandler","massive/munit/TestRunner.hx",352,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_370_asyncTimeoutHandler,"massive.munit.TestRunner","asyncTimeoutHandler",0x266a26c0,"massive.munit.TestRunner.asyncTimeoutHandler","massive/munit/TestRunner.hx",370,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_385_asyncDelegateCreatedHandler,"massive.munit.TestRunner","asyncDelegateCreatedHandler",0x43465b7e,"massive.munit.TestRunner.asyncDelegateCreatedHandler","massive/munit/TestRunner.hx",385,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_388_createAsyncFactory,"massive.munit.TestRunner","createAsyncFactory",0x9f53032f,"massive.munit.TestRunner.createAsyncFactory","massive/munit/TestRunner.hx",388,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_390_tryCallMethod,"massive.munit.TestRunner","tryCallMethod",0x9d40e435,"massive.munit.TestRunner.tryCallMethod","massive/munit/TestRunner.hx",390,0x7b3fda33)
HX_LOCAL_STACK_FRAME(_hx_pos_c964b83bd540393e_89_boot,"massive.munit.TestRunner","boot",0x9f14de97,"massive.munit.TestRunner.boot","massive/munit/TestRunner.hx",89,0x7b3fda33)
namespace massive{
namespace munit{

void TestRunner_obj::__construct(::Dynamic resultClient){
            	HX_GC_STACKFRAME(&_hx_pos_c964b83bd540393e_87_new)
HXLINE( 107)		this->clients = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 100)		this->running = false;
HXLINE( 134)		this->addResultClient(resultClient);
HXLINE( 135)		this->set_asyncFactory( ::massive::munit::async::AsyncFactory_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 139)		this->isDebug = false;
            	}

Dynamic TestRunner_obj::__CreateEmpty() { return new TestRunner_obj; }

void *TestRunner_obj::_hx_vtable = 0;

Dynamic TestRunner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestRunner_obj > _hx_result = new TestRunner_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TestRunner_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b198f73;
}

static ::massive::munit::async::IAsyncDelegateObserver_obj _hx_massive_munit_TestRunner__hx_massive_munit_async_IAsyncDelegateObserver= {
	( void (hx::Object::*)( ::massive::munit::async::AsyncDelegate))&::massive::munit::TestRunner_obj::asyncResponseHandler,
	( void (hx::Object::*)( ::massive::munit::async::AsyncDelegate))&::massive::munit::TestRunner_obj::asyncTimeoutHandler,
	( void (hx::Object::*)( ::massive::munit::async::AsyncDelegate))&::massive::munit::TestRunner_obj::asyncDelegateCreatedHandler,
};

void *TestRunner_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x411fd8dd: return &_hx_massive_munit_TestRunner__hx_massive_munit_async_IAsyncDelegateObserver;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int TestRunner_obj::get_clientCount(){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_98_get_clientCount)
HXDLIN(  98)		return this->clients->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,get_clientCount,return )

 ::massive::munit::async::AsyncFactory TestRunner_obj::set_asyncFactory( ::massive::munit::async::AsyncFactory value){
            	HX_GC_STACKFRAME(&_hx_pos_c964b83bd540393e_116_set_asyncFactory)
HXLINE( 117)		if (hx::IsEq( value,this->asyncFactory )) {
HXLINE( 117)			return value;
            		}
HXLINE( 118)		if (this->running) {
HXLINE( 118)			HX_STACK_DO_THROW( ::massive::munit::MUnitException_obj::__alloc( HX_CTX ,HX_("Can't change AsyncFactory while tests are running",a0,86,8b,78),hx::SourceInfo(HX_("TestRunner.hx",fc,9b,2a,db),118,HX_("massive.munit.TestRunner",29,20,c3,6b),HX_("set_asyncFactory",eb,be,ec,42))));
            		}
HXLINE( 119)		value->observer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 120)		return (this->asyncFactory = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,set_asyncFactory,return )

void TestRunner_obj::addResultClient(::Dynamic resultClient){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_149_addResultClient)
HXLINE( 150)		{
HXLINE( 150)			int _g = (int)0;
HXDLIN( 150)			::Array< ::Dynamic> _g1 = this->clients;
HXDLIN( 150)			while((_g < _g1->length)){
HXLINE( 150)				::Dynamic client = _g1->__get(_g);
HXDLIN( 150)				_g = (_g + (int)1);
HXDLIN( 150)				if (hx::IsEq( client,resultClient )) {
HXLINE( 150)					return;
            				}
            			}
            		}
HXLINE( 151)		::massive::munit::ITestResultClient_obj::set_completionHandler(resultClient,this->clientCompletionHandler_dyn());
HXLINE( 152)		this->clients->push(resultClient);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,addResultClient,(void))

void TestRunner_obj::debug(::Array< ::Dynamic> testSuiteClasses){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_161_debug)
HXLINE( 162)		this->isDebug = true;
HXLINE( 163)		this->run(testSuiteClasses);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,debug,(void))

void TestRunner_obj::run(::Array< ::Dynamic> testSuiteClasses){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::massive::munit::TestRunner,self) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_c964b83bd540393e_191_run)
HXLINE( 192)			self->execute();
HXLINE( 193)			while(self->running){
HXLINE( 195)				::Sys_obj::sleep(((Float).2));
            			}
HXLINE( 197)			 ::cpp::vm::Thread mainThead = ( ( ::cpp::vm::Thread)(::cpp::vm::Thread_obj::readMessage(true)) );
HXLINE( 198)			mainThead->sendMessage(HX_("done",82,f0,6d,42));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_172_run)
HXLINE( 173)		if (this->running) {
HXLINE( 173)			return;
            		}
HXLINE( 174)		this->running = true;
HXLINE( 175)		this->asyncPending = false;
HXLINE( 176)		this->asyncDelegate = null();
HXLINE( 177)		this->testCount = (int)0;
HXLINE( 178)		this->failCount = (int)0;
HXLINE( 179)		this->errorCount = (int)0;
HXLINE( 180)		this->passCount = (int)0;
HXLINE( 181)		this->ignoreCount = (int)0;
HXLINE( 182)		this->suiteIndex = (int)0;
HXLINE( 183)		this->clientCompleteCount = (int)0;
HXLINE( 184)		::massive::munit::Assert_obj::assertionCount = (int)0;
HXLINE( 185)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 185)		{
HXLINE( 185)			int _g1 = (int)0;
HXDLIN( 185)			while((_g1 < testSuiteClasses->length)){
HXLINE( 185)				hx::Class suiteType = testSuiteClasses->__get(_g1).StaticCast< hx::Class >();
HXDLIN( 185)				_g1 = (_g1 + (int)1);
HXDLIN( 185)				_g->push(::Type_obj::createInstance(suiteType,::massive::munit::TestRunner_obj::emptyParams));
            			}
            		}
HXDLIN( 185)		this->testSuites = _g;
HXLINE( 186)		this->startTime = ::massive::munit::util::Timer_obj::stamp();
HXLINE( 189)		 ::massive::munit::TestRunner self = hx::ObjectPtr<OBJ_>(this);
HXLINE( 190)		 ::cpp::vm::Thread runThread = ::cpp::vm::Thread_obj::create( ::Dynamic(new _hx_Closure_0(self)));
HXLINE( 200)		runThread->sendMessage(::cpp::vm::Thread_obj::current());
HXLINE( 201)		::cpp::vm::Thread_obj::readMessage(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,run,(void))

void TestRunner_obj::execute(){
            	HX_GC_STACKFRAME(&_hx_pos_c964b83bd540393e_208_execute)
HXLINE( 209)		{
HXLINE( 209)			int _g1 = this->suiteIndex;
HXDLIN( 209)			int _g = this->testSuites->length;
HXDLIN( 209)			while((_g1 < _g)){
HXLINE( 209)				_g1 = (_g1 + (int)1);
HXDLIN( 209)				int i = (_g1 - (int)1);
HXLINE( 211)				 ::massive::munit::TestSuite suite = this->testSuites->__get(i).StaticCast<  ::massive::munit::TestSuite >();
HXLINE( 212)				{
HXLINE( 212)					 ::massive::munit::TestSuite testClass = suite;
HXDLIN( 212)					while(testClass->hasNext()){
HXLINE( 212)						hx::Class testClass1 = testClass->next();
HXLINE( 214)						bool _hx_tmp;
HXDLIN( 214)						if (hx::IsNotNull( this->activeHelper )) {
HXLINE( 214)							_hx_tmp = hx::IsNotEq( this->activeHelper->type,testClass1 );
            						}
            						else {
HXLINE( 214)							_hx_tmp = true;
            						}
HXDLIN( 214)						if (_hx_tmp) {
HXLINE( 216)							this->activeHelper =  ::massive::munit::TestClassHelper_obj::__alloc( HX_CTX ,testClass1,this->isDebug);
HXLINE( 217)							{
HXLINE( 217)								 ::Dynamic o = this->activeHelper->test;
HXDLIN( 217)								 ::Dynamic func = this->activeHelper->beforeClass;
HXDLIN( 217)								::cpp::VirtualArray args = ::massive::munit::TestRunner_obj::emptyParams;
HXDLIN( 217)								if (!(::Reflect_obj::compareMethods(func,::massive::munit::TestClassHelper_obj::nullFunc_dyn()))) {
HXLINE( 217)									::Reflect_obj::callMethod(o,func,args);
            								}
            							}
            						}
HXLINE( 219)						this->executeTestCases();
HXLINE( 220)						if (!(this->asyncPending)) {
HXLINE( 220)							 ::Dynamic o1 = this->activeHelper->test;
HXDLIN( 220)							 ::Dynamic func1 = this->activeHelper->afterClass;
HXDLIN( 220)							::cpp::VirtualArray args1 = ::massive::munit::TestRunner_obj::emptyParams;
HXDLIN( 220)							if (!(::Reflect_obj::compareMethods(func1,::massive::munit::TestClassHelper_obj::nullFunc_dyn()))) {
HXLINE( 220)								::Reflect_obj::callMethod(o1,func1,args1);
            							}
            						}
            						else {
HXLINE( 223)							suite->repeat();
HXLINE( 224)							this->suiteIndex = i;
HXLINE( 225)							return;
            						}
            					}
            				}
HXLINE( 228)				this->testSuites[i] = null();
            			}
            		}
HXLINE( 231)		if (!(this->asyncPending)) {
HXLINE( 233)			Float time = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 233)			Float time1 = (time - this->startTime);
HXLINE( 234)			{
HXLINE( 234)				int _g2 = (int)0;
HXDLIN( 234)				::Array< ::Dynamic> _g11 = this->clients;
HXDLIN( 234)				while((_g2 < _g11->length)){
HXLINE( 234)					::Dynamic client = _g11->__get(_g2);
HXDLIN( 234)					_g2 = (_g2 + (int)1);
HXLINE( 236)					if (::Std_obj::is(client,hx::ClassOf< ::massive::munit::IAdvancedTestResultClient >())) {
HXLINE( 238)						::Dynamic cl = client;
HXLINE( 239)						::massive::munit::IAdvancedTestResultClient_obj::setCurrentTestClass(cl,null());
            					}
HXLINE( 241)					::massive::munit::ITestResultClient_obj::reportFinalStatistics(client,this->testCount,this->passCount,this->failCount,this->errorCount,this->ignoreCount,time1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,execute,(void))

void TestRunner_obj::executeTestCases(){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_247_executeTestCases)
HXLINE( 248)		{
HXLINE( 248)			int _g = (int)0;
HXDLIN( 248)			::Array< ::Dynamic> _g1 = this->clients;
HXDLIN( 248)			while((_g < _g1->length)){
HXLINE( 248)				::Dynamic c = _g1->__get(_g);
HXDLIN( 248)				_g = (_g + (int)1);
HXLINE( 250)				bool _hx_tmp;
HXDLIN( 250)				if (::Std_obj::is(c,hx::ClassOf< ::massive::munit::IAdvancedTestResultClient >())) {
HXLINE( 250)					_hx_tmp = this->activeHelper->hasNext();
            				}
            				else {
HXLINE( 250)					_hx_tmp = false;
            				}
HXDLIN( 250)				if (_hx_tmp) {
HXLINE( 252)					::Dynamic cl = c;
HXLINE( 253)					::massive::munit::IAdvancedTestResultClient_obj::setCurrentTestClass(cl,this->activeHelper->className);
            				}
            			}
            		}
HXLINE( 256)		{
HXLINE( 256)			 ::massive::munit::TestClassHelper testCaseData = this->activeHelper;
HXDLIN( 256)			while(testCaseData->hasNext()){
HXLINE( 256)				 ::Dynamic testCaseData1 = testCaseData->next();
HXLINE( 258)				if (( ( ::massive::munit::TestResult)(testCaseData1->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) )->ignore) {
HXLINE( 260)					this->ignoreCount++;
HXLINE( 261)					{
HXLINE( 261)						int _g2 = (int)0;
HXDLIN( 261)						::Array< ::Dynamic> _g11 = this->clients;
HXDLIN( 261)						while((_g2 < _g11->length)){
HXLINE( 261)							::Dynamic c1 = _g11->__get(_g2);
HXDLIN( 261)							_g2 = (_g2 + (int)1);
HXLINE( 262)							::massive::munit::ITestResultClient_obj::addIgnore(c1,( ( ::massive::munit::TestResult)(testCaseData1->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) ));
            						}
            					}
            				}
            				else {
HXLINE( 266)					this->testCount++;
HXLINE( 267)					{
HXLINE( 267)						 ::Dynamic o = this->activeHelper->test;
HXDLIN( 267)						 ::Dynamic func = this->activeHelper->before;
HXDLIN( 267)						::cpp::VirtualArray args = ::massive::munit::TestRunner_obj::emptyParams;
HXDLIN( 267)						if (!(::Reflect_obj::compareMethods(func,::massive::munit::TestClassHelper_obj::nullFunc_dyn()))) {
HXLINE( 267)							::Reflect_obj::callMethod(o,func,args);
            						}
            					}
HXLINE( 268)					this->testStartTime = ::massive::munit::util::Timer_obj::stamp();
HXLINE( 269)					this->executeTestCase(testCaseData1,( ( ::massive::munit::TestResult)(testCaseData1->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) )->async);
HXLINE( 270)					if (!(this->asyncPending)) {
HXLINE( 270)						 ::Dynamic o1 = this->activeHelper->test;
HXDLIN( 270)						 ::Dynamic func1 = this->activeHelper->after;
HXDLIN( 270)						::cpp::VirtualArray args1 = ::massive::munit::TestRunner_obj::emptyParams;
HXDLIN( 270)						if (!(::Reflect_obj::compareMethods(func1,::massive::munit::TestClassHelper_obj::nullFunc_dyn()))) {
HXLINE( 270)							::Reflect_obj::callMethod(o1,func1,args1);
            						}
            					}
            					else {
HXLINE( 271)						goto _hx_goto_15;
            					}
            				}
            			}
            			_hx_goto_15:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,executeTestCases,(void))

void TestRunner_obj::executeTestCase( ::Dynamic testCaseData,bool async){
            	HX_GC_STACKFRAME(&_hx_pos_c964b83bd540393e_277_executeTestCase)
HXLINE( 278)		 ::massive::munit::TestResult result = ( ( ::massive::munit::TestResult)(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) );
HXLINE( 279)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 281)			int assertionCount = ::massive::munit::Assert_obj::assertionCount;
HXLINE( 282)			if (async) {
HXLINE( 284)				::Reflect_obj::callMethod( ::Dynamic(testCaseData->__Field(HX_("scope",94,71,d9,78),hx::paccDynamic)), ::Dynamic(testCaseData->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),::cpp::VirtualArray_obj::__new(1)->init(0,this->asyncFactory));
HXLINE( 285)				if (hx::IsNull( this->asyncDelegate )) {
HXLINE( 287)					HX_STACK_DO_THROW( ::massive::munit::async::MissingAsyncDelegateException_obj::__alloc( HX_CTX ,(HX_("No AsyncDelegate was created in async test at ",31,aa,40,73) + result->get_location()),null()));
            				}
HXLINE( 289)				this->asyncPending = true;
            			}
            			else {
HXLINE( 293)				::Reflect_obj::callMethod( ::Dynamic(testCaseData->__Field(HX_("scope",94,71,d9,78),hx::paccDynamic)), ::Dynamic(testCaseData->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),::massive::munit::TestRunner_obj::emptyParams);
HXLINE( 295)				result->passed = true;
HXLINE( 296)				Float _hx_tmp = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 296)				result->executionTime = (_hx_tmp - this->testStartTime);
HXLINE( 297)				this->passCount++;
HXLINE( 298)				{
HXLINE( 298)					int _g = (int)0;
HXDLIN( 298)					::Array< ::Dynamic> _g1 = this->clients;
HXDLIN( 298)					while((_g < _g1->length)){
HXLINE( 298)						::Dynamic c = _g1->__get(_g);
HXDLIN( 298)						_g = (_g + (int)1);
HXLINE( 299)						::massive::munit::ITestResultClient_obj::addPass(c,result);
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 304)				bool _hx_tmp1;
HXDLIN( 304)				if (async) {
HXLINE( 304)					_hx_tmp1 = hx::IsNotNull( this->asyncDelegate );
            				}
            				else {
HXLINE( 304)					_hx_tmp1 = false;
            				}
HXDLIN( 304)				if (_hx_tmp1) {
HXLINE( 306)					this->asyncDelegate->cancelTest();
HXLINE( 307)					this->asyncDelegate = null();
            				}
HXLINE( 311)				if (::Std_obj::is(e,hx::ClassOf< ::org::hamcrest::AssertionException >())) {
HXLINE( 312)					e =  ::massive::munit::AssertionException_obj::__alloc( HX_CTX , ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),hx::paccDynamic)), ::Dynamic(e->__Field(HX_("info",6e,38,bb,45),hx::paccDynamic)));
            				}
HXLINE( 315)				if (::Std_obj::is(e,hx::ClassOf< ::massive::munit::AssertionException >())) {
HXLINE( 317)					Float _hx_tmp2 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 317)					result->executionTime = (_hx_tmp2 - this->testStartTime);
HXLINE( 318)					result->failure = ( ( ::massive::munit::AssertionException)(e) );
HXLINE( 319)					this->failCount++;
HXLINE( 320)					{
HXLINE( 320)						int _g2 = (int)0;
HXDLIN( 320)						::Array< ::Dynamic> _g11 = this->clients;
HXDLIN( 320)						while((_g2 < _g11->length)){
HXLINE( 320)							::Dynamic c1 = _g11->__get(_g2);
HXDLIN( 320)							_g2 = (_g2 + (int)1);
HXLINE( 321)							::massive::munit::ITestResultClient_obj::addFail(c1,result);
            						}
            					}
            				}
            				else {
HXLINE( 325)					Float _hx_tmp3 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 325)					result->executionTime = (_hx_tmp3 - this->testStartTime);
HXLINE( 326)					if (!(::Std_obj::is(e,hx::ClassOf< ::massive::munit::MUnitException >()))) {
HXLINE( 327)						e =  ::massive::munit::UnhandledException_obj::__alloc( HX_CTX ,e,result->get_location());
            					}
HXLINE( 329)					result->error = e;
HXLINE( 330)					this->errorCount++;
HXLINE( 331)					{
HXLINE( 331)						int _g3 = (int)0;
HXDLIN( 331)						::Array< ::Dynamic> _g12 = this->clients;
HXDLIN( 331)						while((_g3 < _g12->length)){
HXLINE( 331)							::Dynamic c2 = _g12->__get(_g3);
HXDLIN( 331)							_g3 = (_g3 + (int)1);
HXLINE( 332)							::massive::munit::ITestResultClient_obj::addError(c2,result);
            						}
            					}
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestRunner_obj,executeTestCase,(void))

void TestRunner_obj::clientCompletionHandler(::Dynamic resultClient){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_339_clientCompletionHandler)
HXDLIN( 339)		if ((++this->clientCompleteCount == this->clients->length)) {
HXLINE( 341)			if (hx::IsNotNull( this->completionHandler )) {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,bool,a1) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_c964b83bd540393e_341_clientCompletionHandler)
HXLINE( 341)					f(a1);
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 341)				 ::Dynamic f = this->completionHandler;
HXDLIN( 341)				bool a1 = (this->passCount == this->testCount);
HXDLIN( 341)				::massive::munit::util::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(f,a1)),(int)10);
            			}
HXLINE( 342)			this->running = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,clientCompletionHandler,(void))

void TestRunner_obj::asyncResponseHandler( ::massive::munit::async::AsyncDelegate delegate){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_352_asyncResponseHandler)
HXLINE( 353)		 ::Dynamic testCaseData = this->activeHelper->current();
HXLINE( 354)		testCaseData->__SetField(HX_("scope",94,71,d9,78),delegate,hx::paccDynamic);
HXLINE( 355)		testCaseData->__SetField(HX_("test",52,c8,f9,4c),delegate->runTest_dyn(),hx::paccDynamic);
HXLINE( 356)		this->asyncPending = false;
HXLINE( 357)		this->asyncDelegate = null();
HXLINE( 358)		this->executeTestCase(testCaseData,false);
HXLINE( 359)		{
HXLINE( 359)			 ::Dynamic o = this->activeHelper->test;
HXDLIN( 359)			 ::Dynamic func = this->activeHelper->after;
HXDLIN( 359)			::cpp::VirtualArray args = ::massive::munit::TestRunner_obj::emptyParams;
HXDLIN( 359)			if (!(::Reflect_obj::compareMethods(func,::massive::munit::TestClassHelper_obj::nullFunc_dyn()))) {
HXLINE( 359)				::Reflect_obj::callMethod(o,func,args);
            			}
            		}
HXLINE( 360)		this->execute();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,asyncResponseHandler,(void))

void TestRunner_obj::asyncTimeoutHandler( ::massive::munit::async::AsyncDelegate delegate){
            	HX_GC_STACKFRAME(&_hx_pos_c964b83bd540393e_370_asyncTimeoutHandler)
HXLINE( 371)		 ::Dynamic testCaseData = this->activeHelper->current();
HXLINE( 372)		 ::massive::munit::TestResult result = ( ( ::massive::munit::TestResult)(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) );
HXLINE( 373)		Float _hx_tmp = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 373)		result->executionTime = (_hx_tmp - this->testStartTime);
HXLINE( 374)		result->error =  ::massive::munit::async::AsyncTimeoutException_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),delegate->info);
HXLINE( 375)		this->asyncPending = false;
HXLINE( 376)		this->asyncDelegate = null();
HXLINE( 377)		this->errorCount++;
HXLINE( 378)		{
HXLINE( 378)			int _g = (int)0;
HXDLIN( 378)			::Array< ::Dynamic> _g1 = this->clients;
HXDLIN( 378)			while((_g < _g1->length)){
HXLINE( 378)				::Dynamic c = _g1->__get(_g);
HXDLIN( 378)				_g = (_g + (int)1);
HXDLIN( 378)				::massive::munit::ITestResultClient_obj::addError(c,result);
            			}
            		}
HXLINE( 379)		{
HXLINE( 379)			 ::Dynamic o = this->activeHelper->test;
HXDLIN( 379)			 ::Dynamic func = this->activeHelper->after;
HXDLIN( 379)			::cpp::VirtualArray args = ::massive::munit::TestRunner_obj::emptyParams;
HXDLIN( 379)			if (!(::Reflect_obj::compareMethods(func,::massive::munit::TestClassHelper_obj::nullFunc_dyn()))) {
HXLINE( 379)				::Reflect_obj::callMethod(o,func,args);
            			}
            		}
HXLINE( 380)		this->execute();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,asyncTimeoutHandler,(void))

void TestRunner_obj::asyncDelegateCreatedHandler( ::massive::munit::async::AsyncDelegate delegate){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_385_asyncDelegateCreatedHandler)
HXDLIN( 385)		this->asyncDelegate = delegate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,asyncDelegateCreatedHandler,(void))

 ::massive::munit::async::AsyncFactory TestRunner_obj::createAsyncFactory(){
            	HX_GC_STACKFRAME(&_hx_pos_c964b83bd540393e_388_createAsyncFactory)
HXDLIN( 388)		return  ::massive::munit::async::AsyncFactory_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,createAsyncFactory,return )

::cpp::VirtualArray TestRunner_obj::emptyParams;

 ::Dynamic TestRunner_obj::tryCallMethod( ::Dynamic o, ::Dynamic func,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_390_tryCallMethod)
HXLINE( 391)		if (::Reflect_obj::compareMethods(func,::massive::munit::TestClassHelper_obj::nullFunc_dyn())) {
HXLINE( 391)			return null();
            		}
HXLINE( 392)		return ::Reflect_obj::callMethod(o,func,args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TestRunner_obj,tryCallMethod,return )


hx::ObjectPtr< TestRunner_obj > TestRunner_obj::__new(::Dynamic resultClient) {
	hx::ObjectPtr< TestRunner_obj > __this = new TestRunner_obj();
	__this->__construct(resultClient);
	return __this;
}

hx::ObjectPtr< TestRunner_obj > TestRunner_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic resultClient) {
	TestRunner_obj *__this = (TestRunner_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TestRunner_obj), true, "massive.munit.TestRunner"));
	*(void **)__this = TestRunner_obj::_hx_vtable;
	__this->__construct(resultClient);
	return __this;
}

TestRunner_obj::TestRunner_obj()
{
}

void TestRunner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestRunner);
	HX_MARK_MEMBER_NAME(completionHandler,"completionHandler");
	HX_MARK_MEMBER_NAME(clientCount,"clientCount");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(testCount,"testCount");
	HX_MARK_MEMBER_NAME(failCount,"failCount");
	HX_MARK_MEMBER_NAME(errorCount,"errorCount");
	HX_MARK_MEMBER_NAME(passCount,"passCount");
	HX_MARK_MEMBER_NAME(ignoreCount,"ignoreCount");
	HX_MARK_MEMBER_NAME(clientCompleteCount,"clientCompleteCount");
	HX_MARK_MEMBER_NAME(clients,"clients");
	HX_MARK_MEMBER_NAME(activeHelper,"activeHelper");
	HX_MARK_MEMBER_NAME(testSuites,"testSuites");
	HX_MARK_MEMBER_NAME(asyncPending,"asyncPending");
	HX_MARK_MEMBER_NAME(asyncDelegate,"asyncDelegate");
	HX_MARK_MEMBER_NAME(suiteIndex,"suiteIndex");
	HX_MARK_MEMBER_NAME(asyncFactory,"asyncFactory");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(testStartTime,"testStartTime");
	HX_MARK_MEMBER_NAME(isDebug,"isDebug");
	HX_MARK_END_CLASS();
}

void TestRunner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(completionHandler,"completionHandler");
	HX_VISIT_MEMBER_NAME(clientCount,"clientCount");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(testCount,"testCount");
	HX_VISIT_MEMBER_NAME(failCount,"failCount");
	HX_VISIT_MEMBER_NAME(errorCount,"errorCount");
	HX_VISIT_MEMBER_NAME(passCount,"passCount");
	HX_VISIT_MEMBER_NAME(ignoreCount,"ignoreCount");
	HX_VISIT_MEMBER_NAME(clientCompleteCount,"clientCompleteCount");
	HX_VISIT_MEMBER_NAME(clients,"clients");
	HX_VISIT_MEMBER_NAME(activeHelper,"activeHelper");
	HX_VISIT_MEMBER_NAME(testSuites,"testSuites");
	HX_VISIT_MEMBER_NAME(asyncPending,"asyncPending");
	HX_VISIT_MEMBER_NAME(asyncDelegate,"asyncDelegate");
	HX_VISIT_MEMBER_NAME(suiteIndex,"suiteIndex");
	HX_VISIT_MEMBER_NAME(asyncFactory,"asyncFactory");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(testStartTime,"testStartTime");
	HX_VISIT_MEMBER_NAME(isDebug,"isDebug");
}

hx::Val TestRunner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"debug") ) { return hx::Val( debug_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { return hx::Val( running ); }
		if (HX_FIELD_EQ(inName,"clients") ) { return hx::Val( clients ); }
		if (HX_FIELD_EQ(inName,"isDebug") ) { return hx::Val( isDebug ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testCount") ) { return hx::Val( testCount ); }
		if (HX_FIELD_EQ(inName,"failCount") ) { return hx::Val( failCount ); }
		if (HX_FIELD_EQ(inName,"passCount") ) { return hx::Val( passCount ); }
		if (HX_FIELD_EQ(inName,"startTime") ) { return hx::Val( startTime ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"errorCount") ) { return hx::Val( errorCount ); }
		if (HX_FIELD_EQ(inName,"testSuites") ) { return hx::Val( testSuites ); }
		if (HX_FIELD_EQ(inName,"suiteIndex") ) { return hx::Val( suiteIndex ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { return hx::Val( inCallProp == hx::paccAlways ? get_clientCount() : clientCount ); }
		if (HX_FIELD_EQ(inName,"ignoreCount") ) { return hx::Val( ignoreCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeHelper") ) { return hx::Val( activeHelper ); }
		if (HX_FIELD_EQ(inName,"asyncPending") ) { return hx::Val( asyncPending ); }
		if (HX_FIELD_EQ(inName,"asyncFactory") ) { return hx::Val( asyncFactory ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"asyncDelegate") ) { return hx::Val( asyncDelegate ); }
		if (HX_FIELD_EQ(inName,"testStartTime") ) { return hx::Val( testStartTime ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_clientCount") ) { return hx::Val( get_clientCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"addResultClient") ) { return hx::Val( addResultClient_dyn() ); }
		if (HX_FIELD_EQ(inName,"executeTestCase") ) { return hx::Val( executeTestCase_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_asyncFactory") ) { return hx::Val( set_asyncFactory_dyn() ); }
		if (HX_FIELD_EQ(inName,"executeTestCases") ) { return hx::Val( executeTestCases_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { return hx::Val( completionHandler ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createAsyncFactory") ) { return hx::Val( createAsyncFactory_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clientCompleteCount") ) { return hx::Val( clientCompleteCount ); }
		if (HX_FIELD_EQ(inName,"asyncTimeoutHandler") ) { return hx::Val( asyncTimeoutHandler_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"asyncResponseHandler") ) { return hx::Val( asyncResponseHandler_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"clientCompletionHandler") ) { return hx::Val( clientCompletionHandler_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"asyncDelegateCreatedHandler") ) { return hx::Val( asyncDelegateCreatedHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestRunner_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"emptyParams") ) { outValue = ( emptyParams ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tryCallMethod") ) { outValue = tryCallMethod_dyn(); return true; }
	}
	return false;
}

hx::Val TestRunner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clients") ) { clients=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDebug") ) { isDebug=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testCount") ) { testCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"failCount") ) { failCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"passCount") ) { passCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"errorCount") ) { errorCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testSuites") ) { testSuites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"suiteIndex") ) { suiteIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { clientCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignoreCount") ) { ignoreCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeHelper") ) { activeHelper=inValue.Cast<  ::massive::munit::TestClassHelper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"asyncPending") ) { asyncPending=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"asyncFactory") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_asyncFactory(inValue.Cast<  ::massive::munit::async::AsyncFactory >()) );asyncFactory=inValue.Cast<  ::massive::munit::async::AsyncFactory >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"asyncDelegate") ) { asyncDelegate=inValue.Cast<  ::massive::munit::async::AsyncDelegate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testStartTime") ) { testStartTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { completionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clientCompleteCount") ) { clientCompleteCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestRunner_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"emptyParams") ) { emptyParams=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
	}
	return false;
}

void TestRunner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"));
	outFields->push(HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"));
	outFields->push(HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13"));
	outFields->push(HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2"));
	outFields->push(HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf"));
	outFields->push(HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c"));
	outFields->push(HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d"));
	outFields->push(HX_HCSTRING("clientCompleteCount","\x0b","\x28","\xa0","\xa5"));
	outFields->push(HX_HCSTRING("clients","\xc8","\x37","\x81","\xfb"));
	outFields->push(HX_HCSTRING("activeHelper","\xd4","\xcb","\x69","\x64"));
	outFields->push(HX_HCSTRING("testSuites","\xad","\x68","\xa0","\xb7"));
	outFields->push(HX_HCSTRING("asyncPending","\x7b","\x60","\x20","\x6c"));
	outFields->push(HX_HCSTRING("asyncDelegate","\xa1","\x4e","\x2a","\x47"));
	outFields->push(HX_HCSTRING("suiteIndex","\x3a","\xf1","\x80","\xca"));
	outFields->push(HX_HCSTRING("asyncFactory","\xee","\xe4","\x0b","\xe8"));
	outFields->push(HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"));
	outFields->push(HX_HCSTRING("testStartTime","\xdd","\xc2","\x2a","\x39"));
	outFields->push(HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestRunner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestRunner_obj,completionHandler),HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,clientCount),HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28")},
	{hx::fsBool,(int)offsetof(TestRunner_obj,running),HX_HCSTRING("running","\xff","\x6d","\x69","\xeb")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,testCount),HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,failCount),HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,errorCount),HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,passCount),HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,ignoreCount),HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,clientCompleteCount),HX_HCSTRING("clientCompleteCount","\x0b","\x28","\xa0","\xa5")},
	{hx::fsObject /*Array< ::massive::munit::ITestResultClient >*/ ,(int)offsetof(TestRunner_obj,clients),HX_HCSTRING("clients","\xc8","\x37","\x81","\xfb")},
	{hx::fsObject /*::massive::munit::TestClassHelper*/ ,(int)offsetof(TestRunner_obj,activeHelper),HX_HCSTRING("activeHelper","\xd4","\xcb","\x69","\x64")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TestRunner_obj,testSuites),HX_HCSTRING("testSuites","\xad","\x68","\xa0","\xb7")},
	{hx::fsBool,(int)offsetof(TestRunner_obj,asyncPending),HX_HCSTRING("asyncPending","\x7b","\x60","\x20","\x6c")},
	{hx::fsObject /*::massive::munit::async::AsyncDelegate*/ ,(int)offsetof(TestRunner_obj,asyncDelegate),HX_HCSTRING("asyncDelegate","\xa1","\x4e","\x2a","\x47")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,suiteIndex),HX_HCSTRING("suiteIndex","\x3a","\xf1","\x80","\xca")},
	{hx::fsObject /*::massive::munit::async::AsyncFactory*/ ,(int)offsetof(TestRunner_obj,asyncFactory),HX_HCSTRING("asyncFactory","\xee","\xe4","\x0b","\xe8")},
	{hx::fsFloat,(int)offsetof(TestRunner_obj,startTime),HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsFloat,(int)offsetof(TestRunner_obj,testStartTime),HX_HCSTRING("testStartTime","\xdd","\xc2","\x2a","\x39")},
	{hx::fsBool,(int)offsetof(TestRunner_obj,isDebug),HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestRunner_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &TestRunner_obj::emptyParams,HX_HCSTRING("emptyParams","\xb3","\x91","\xa3","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestRunner_obj_sMemberFields[] = {
	HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b"),
	HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"),
	HX_HCSTRING("get_clientCount","\x1b","\x72","\x6a","\xe9"),
	HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"),
	HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13"),
	HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2"),
	HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf"),
	HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c"),
	HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d"),
	HX_HCSTRING("clientCompleteCount","\x0b","\x28","\xa0","\xa5"),
	HX_HCSTRING("clients","\xc8","\x37","\x81","\xfb"),
	HX_HCSTRING("activeHelper","\xd4","\xcb","\x69","\x64"),
	HX_HCSTRING("testSuites","\xad","\x68","\xa0","\xb7"),
	HX_HCSTRING("asyncPending","\x7b","\x60","\x20","\x6c"),
	HX_HCSTRING("asyncDelegate","\xa1","\x4e","\x2a","\x47"),
	HX_HCSTRING("suiteIndex","\x3a","\xf1","\x80","\xca"),
	HX_HCSTRING("asyncFactory","\xee","\xe4","\x0b","\xe8"),
	HX_HCSTRING("set_asyncFactory","\xeb","\xbe","\xec","\x42"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("testStartTime","\xdd","\xc2","\x2a","\x39"),
	HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73"),
	HX_HCSTRING("addResultClient","\xc9","\x96","\xfd","\xa6"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	HX_HCSTRING("executeTestCases","\x1c","\x61","\x62","\x2e"),
	HX_HCSTRING("executeTestCase","\x77","\x27","\xc0","\x59"),
	HX_HCSTRING("clientCompletionHandler","\x43","\x99","\xcc","\xa7"),
	HX_HCSTRING("asyncResponseHandler","\x6d","\xf7","\xc5","\x95"),
	HX_HCSTRING("asyncTimeoutHandler","\x85","\x07","\xce","\x5f"),
	HX_HCSTRING("asyncDelegateCreatedHandler","\x43","\x09","\x50","\xa7"),
	HX_HCSTRING("createAsyncFactory","\x0a","\x22","\x2a","\xe2"),
	::String(null()) };

static void TestRunner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestRunner_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestRunner_obj::emptyParams,"emptyParams");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestRunner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestRunner_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestRunner_obj::emptyParams,"emptyParams");
};

#endif

hx::Class TestRunner_obj::__mClass;

static ::String TestRunner_obj_sStaticFields[] = {
	HX_HCSTRING("emptyParams","\xb3","\x91","\xa3","\xb5"),
	HX_HCSTRING("tryCallMethod","\x3a","\x33","\xd4","\xf6"),
	::String(null())
};

void TestRunner_obj::__register()
{
	hx::Object *dummy = new TestRunner_obj;
	TestRunner_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.TestRunner","\x29","\x20","\xc3","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestRunner_obj::__GetStatic;
	__mClass->mSetStaticField = &TestRunner_obj::__SetStatic;
	__mClass->mMarkFunc = TestRunner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestRunner_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestRunner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestRunner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestRunner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestRunner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestRunner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestRunner_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c964b83bd540393e_89_boot)
HXDLIN(  89)		emptyParams = ::cpp::VirtualArray_obj::__new(0);
            	}
}

} // end namespace massive
} // end namespace munit
