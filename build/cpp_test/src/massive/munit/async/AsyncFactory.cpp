// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_massive_munit_async_AsyncDelegate
#include <massive/munit/async/AsyncDelegate.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncFactory
#include <massive/munit/async/AsyncFactory.h>
#endif
#ifndef INCLUDED_massive_munit_async_IAsyncDelegateObserver
#include <massive/munit/async/IAsyncDelegateObserver.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84770078c754c477_77_new,"massive.munit.async.AsyncFactory","new",0x8d29f519,"massive.munit.async.AsyncFactory.new","massive/munit/async/AsyncFactory.hx",77,0x7b443f94)
HX_LOCAL_STACK_FRAME(_hx_pos_84770078c754c477_92_createHandler,"massive.munit.async.AsyncFactory","createHandler",0xca3f2e27,"massive.munit.async.AsyncFactory.createHandler","massive/munit/async/AsyncFactory.hx",92,0x7b443f94)
namespace massive{
namespace munit{
namespace async{

void AsyncFactory_obj::__construct(::Dynamic observer){
            	HX_STACKFRAME(&_hx_pos_84770078c754c477_77_new)
HXLINE(  78)		this->observer = observer;
HXLINE(  79)		this->asyncDelegateCount = (int)0;
            	}

Dynamic AsyncFactory_obj::__CreateEmpty() { return new AsyncFactory_obj; }

void *AsyncFactory_obj::_hx_vtable = 0;

Dynamic AsyncFactory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AsyncFactory_obj > _hx_result = new AsyncFactory_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AsyncFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38734eb1;
}

 ::Dynamic AsyncFactory_obj::createHandler( ::Dynamic testCase, ::Dynamic handler, ::Dynamic timeout, ::Dynamic info){
            	HX_GC_STACKFRAME(&_hx_pos_84770078c754c477_92_createHandler)
HXLINE(  93)		 ::massive::munit::async::AsyncDelegate delegate =  ::massive::munit::async::AsyncDelegate_obj::__alloc( HX_CTX ,testCase,handler,timeout,info);
HXLINE(  94)		delegate->observer = this->observer;
HXLINE(  95)		this->asyncDelegateCount++;
HXLINE(  96)		::massive::munit::async::IAsyncDelegateObserver_obj::asyncDelegateCreatedHandler(this->observer,delegate);
HXLINE(  97)		return delegate->delegateHandler;
            	}


HX_DEFINE_DYNAMIC_FUNC4(AsyncFactory_obj,createHandler,return )


hx::ObjectPtr< AsyncFactory_obj > AsyncFactory_obj::__new(::Dynamic observer) {
	hx::ObjectPtr< AsyncFactory_obj > __this = new AsyncFactory_obj();
	__this->__construct(observer);
	return __this;
}

hx::ObjectPtr< AsyncFactory_obj > AsyncFactory_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic observer) {
	AsyncFactory_obj *__this = (AsyncFactory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AsyncFactory_obj), true, "massive.munit.async.AsyncFactory"));
	*(void **)__this = AsyncFactory_obj::_hx_vtable;
	__this->__construct(observer);
	return __this;
}

AsyncFactory_obj::AsyncFactory_obj()
{
}

void AsyncFactory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AsyncFactory);
	HX_MARK_MEMBER_NAME(observer,"observer");
	HX_MARK_MEMBER_NAME(asyncDelegateCount,"asyncDelegateCount");
	HX_MARK_END_CLASS();
}

void AsyncFactory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(observer,"observer");
	HX_VISIT_MEMBER_NAME(asyncDelegateCount,"asyncDelegateCount");
}

hx::Val AsyncFactory_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"observer") ) { return hx::Val( observer ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createHandler") ) { return hx::Val( createHandler_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"asyncDelegateCount") ) { return hx::Val( asyncDelegateCount ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AsyncFactory_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"observer") ) { observer=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"asyncDelegateCount") ) { asyncDelegateCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AsyncFactory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("observer","\x16","\x3c","\x4e","\x26"));
	outFields->push(HX_HCSTRING("asyncDelegateCount","\x6e","\xbe","\xc0","\x93"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AsyncFactory_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::massive::munit::async::IAsyncDelegateObserver*/ ,(int)offsetof(AsyncFactory_obj,observer),HX_HCSTRING("observer","\x16","\x3c","\x4e","\x26")},
	{hx::fsInt,(int)offsetof(AsyncFactory_obj,asyncDelegateCount),HX_HCSTRING("asyncDelegateCount","\x6e","\xbe","\xc0","\x93")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AsyncFactory_obj_sStaticStorageInfo = 0;
#endif

static ::String AsyncFactory_obj_sMemberFields[] = {
	HX_HCSTRING("observer","\x16","\x3c","\x4e","\x26"),
	HX_HCSTRING("asyncDelegateCount","\x6e","\xbe","\xc0","\x93"),
	HX_HCSTRING("createHandler","\x2e","\x88","\x18","\x2e"),
	::String(null()) };

static void AsyncFactory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AsyncFactory_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AsyncFactory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AsyncFactory_obj::__mClass,"__mClass");
};

#endif

hx::Class AsyncFactory_obj::__mClass;

void AsyncFactory_obj::__register()
{
	hx::Object *dummy = new AsyncFactory_obj;
	AsyncFactory_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.async.AsyncFactory","\xa7","\x74","\xb9","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AsyncFactory_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AsyncFactory_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AsyncFactory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AsyncFactory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AsyncFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AsyncFactory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace munit
} // end namespace async
