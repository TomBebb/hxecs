// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_haxe_util_ReflectUtil
#include <massive/haxe/util/ReflectUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_070f1862c7f8ef8d_67_new,"massive.haxe.Exception","new",0x75c9a923,"massive.haxe.Exception.new","massive/haxe/Exception.hx",67,0x32c9780d)
HX_LOCAL_STACK_FRAME(_hx_pos_070f1862c7f8ef8d_79_toString,"massive.haxe.Exception","toString",0xe8615509,"massive.haxe.Exception.toString","massive/haxe/Exception.hx",79,0x32c9780d)
namespace massive{
namespace haxe{

void Exception_obj::__construct(::String message, ::Dynamic info){
            	HX_STACKFRAME(&_hx_pos_070f1862c7f8ef8d_67_new)
HXLINE(  68)		this->message = message;
HXLINE(  69)		this->info = info;
HXLINE(  70)		this->type = ( (::String)(::massive::haxe::util::ReflectUtil_obj::here(hx::SourceInfo(HX_("Exception.hx",ef,59,7d,c2),70,HX_("massive.haxe.Exception",b1,db,97,14),HX_("new",60,d0,53,00)))->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) );
            	}

Dynamic Exception_obj::__CreateEmpty() { return new Exception_obj; }

void *Exception_obj::_hx_vtable = 0;

Dynamic Exception_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Exception_obj > _hx_result = new Exception_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Exception_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b60f4c9;
}

::String Exception_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_070f1862c7f8ef8d_79_toString)
HXLINE(  80)		::String str = ((this->type + HX_(": ",a6,32,00,00)) + this->message);
HXLINE(  81)		if (hx::IsNotNull( this->info )) {
HXLINE(  82)			str = (str + ((((((HX_(" at ",ad,d3,70,15) + ( (::String)(this->info->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("#",23,00,00,00)) + ( (::String)(this->info->__Field(HX_("methodName",cc,19,0f,12),hx::paccDynamic)) )) + HX_(" (",08,1c,00,00)) + ( (int)(this->info->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )) + HX_(")",29,00,00,00)));
            		}
HXLINE(  83)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,toString,return )


hx::ObjectPtr< Exception_obj > Exception_obj::__new(::String message, ::Dynamic info) {
	hx::ObjectPtr< Exception_obj > __this = new Exception_obj();
	__this->__construct(message,info);
	return __this;
}

hx::ObjectPtr< Exception_obj > Exception_obj::__alloc(hx::Ctx *_hx_ctx,::String message, ::Dynamic info) {
	Exception_obj *__this = (Exception_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Exception_obj), true, "massive.haxe.Exception"));
	*(void **)__this = Exception_obj::_hx_vtable;
	__this->__construct(message,info);
	return __this;
}

Exception_obj::Exception_obj()
{
}

void Exception_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Exception);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_END_CLASS();
}

void Exception_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(message,"message");
	HX_VISIT_MEMBER_NAME(info,"info");
}

hx::Val Exception_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"info") ) { return hx::Val( info ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { return hx::Val( message ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Exception_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { message=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Exception_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("message","\xc7","\x35","\x11","\x9a"));
	outFields->push(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Exception_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Exception_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsString,(int)offsetof(Exception_obj,message),HX_HCSTRING("message","\xc7","\x35","\x11","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Exception_obj,info),HX_HCSTRING("info","\x6e","\x38","\xbb","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Exception_obj_sStaticStorageInfo = 0;
#endif

static ::String Exception_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("message","\xc7","\x35","\x11","\x9a"),
	HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Exception_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Exception_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Exception_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Exception_obj::__mClass,"__mClass");
};

#endif

hx::Class Exception_obj::__mClass;

void Exception_obj::__register()
{
	hx::Object *dummy = new Exception_obj;
	Exception_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.haxe.Exception","\xb1","\xdb","\x97","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Exception_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Exception_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Exception_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Exception_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Exception_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Exception_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace haxe
